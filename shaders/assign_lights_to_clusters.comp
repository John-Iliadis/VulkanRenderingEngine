#version 460 core

#include "lights.glsl"
#include "cluster.glsl"

layout (push_constant) uniform PushConstants
{
    uvec4 clusterGrid;
    uint pointLightCount;
};

layout (set = 0, binding = 0) uniform CameraUBO
{
    mat4 view;
    mat4 projection;
    mat4 viewProj;
    vec4 cameraPos;
    vec4 cameraDir;
    float nearPlane;
    float farPlane;
};

layout (set = 1, binding = 0) restrict buffer volumeClusterSSBO { Cluster clusters[]; };
layout (set = 1, binding = 1) readonly buffer PointLightSSBO { PointLight pointLights[]; };

bool sphereIntersectAABB(Cluster cluster, PointLight pointLight);

void main()
{
    uint clusterIndex = gl_GlobalInvocationID.x +
                        gl_GlobalInvocationID.y * clusterGrid.x +
                        gl_GlobalInvocationID.z * clusterGrid.x * clusterGrid.y;

    Cluster cluster = clusters[clusterIndex];
    cluster.lightCount = 0;

    for (uint i = 0; i < pointLightCount; ++i)
    {
        PointLight pointLight = pointLights[i];

        if (sphereIntersectAABB(cluster, pointLight))
        {
            cluster.lightIndices[cluster.lightCount] = i;
            ++cluster.lightCount;
        }

        if (cluster.lightCount == MAX_LIGHTS_PER_CLUSTER)
            break;
    }

    clusters[clusterIndex] = cluster;
}

bool sphereIntersectAABB(Cluster cluster, PointLight pointLight)
{
    vec3 lightPosVS = vec3(view * pointLight.position);
    lightPosVS.z *= -1.0;
    vec3 closestPoint = clamp(lightPosVS, cluster.minPoint.xyz, cluster.maxPoint.xyz);
    float dist = distance(closestPoint, lightPosVS);
    return dist < pointLight.range;
}
