#version 460 core

#include "cluster.glsl"

layout (push_constant) uniform PushConstants
{
    mat4 inverseProj;
    uvec4 clusterGrid;
    uvec2 screenSize;
};

layout (set = 0, binding = 0) uniform CameraUBO
{
    mat4 view;
    mat4 projection;
    mat4 viewProj;
    vec4 cameraPos;
    vec4 cameraDir;
    float nearPlane;
    float farPlane;
};

layout (set = 1, binding = 0) restrict buffer volumeClusterSSBO { Cluster clusters[]; };

vec3 screenToView(vec2 screenCoords);
vec3 lineIntersectPlane(vec3 a, vec3 b, float zDistance);

void main()
{
    // per cluster variables
    vec2 clusterSize = screenSize / vec2(clusterGrid.xy);
    uint clusterIndex = gl_GlobalInvocationID.x +
                        gl_GlobalInvocationID.y * clusterGrid.x +
                        gl_GlobalInvocationID.z * clusterGrid.x * clusterGrid.y;

    // calculate the z of the near and far cluster planes using the exponential equation
    float nearClusterPlane = nearPlane * pow(farPlane / nearPlane, gl_GlobalInvocationID.z / float(clusterGrid.z));
    float farClusterPlane = nearPlane * pow(farPlane / nearPlane, (gl_GlobalInvocationID.z + 1) / float(clusterGrid.z));

    // calculate the screen space min and max point of the cluster
    vec2 minPointSS = gl_GlobalInvocationID.xy * clusterSize; // top left
    vec2 maxPointSS = (gl_GlobalInvocationID.xy + 1) * clusterSize; // bottom right

    // transform the points from screen space to view space
    vec3 minPointVs = screenToView(minPointSS);
    vec3 maxPointVs = screenToView(maxPointSS);

    // find the intesection points of the cluster to the near and far planes
    vec3 minPointNear = lineIntersectPlane(vec3(0.0), minPointVs, nearClusterPlane);
    vec3 minPointFar = lineIntersectPlane(vec3(0.0), minPointVs, farClusterPlane);
    vec3 maxPointNear = lineIntersectPlane(vec3(0.0), maxPointVs, nearClusterPlane);
    vec3 maxPointFar = lineIntersectPlane(vec3(0.0), maxPointVs, farClusterPlane);

    // make the bounding box of the frustum segment
    vec3 minPointAABB = min(min(minPointNear, minPointFar), min(maxPointNear, maxPointFar));
    vec3 maxPointAABB = max(max(minPointNear, minPointFar), max(maxPointNear, maxPointFar));

    // for some reason the x coordinates are inverted. Quick fix
    float minX = -maxPointAABB.x;
    float maxX = -minPointAABB.x;
    maxPointAABB.x = maxX;
    minPointAABB.x = minX;

    // store the result
    clusters[clusterIndex].minPoint = vec4(minPointAABB, 0.0);
    clusters[clusterIndex].maxPoint = vec4(maxPointAABB, 0.0);
}

vec3 screenToView(vec2 screenCoords)
{
    vec2 texCoords = screenCoords / screenSize;
    vec4 ndc = vec4(vec2(texCoords.x, 1.0 - texCoords.y) * 2.0 - 1.0, 1.0, 1.0);

    vec4 viewCoord = inverseProj * ndc;
    viewCoord /= viewCoord.w;

    return viewCoord.xyz;
}

vec3 lineIntersectPlane(vec3 a, vec3 b, float zDistance)
{
    vec3 direction = b - a;
    vec3 planeNormal = vec3(0.0, 0.0, 1.0);

    // substitute the parametric line equation into the plane equation and solve for t
    float t = (zDistance - dot(planeNormal, a)) / dot(planeNormal, direction);

    // plug t into the line equation to get the intersection point
    return a + t * direction;
}
